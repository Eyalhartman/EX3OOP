dana_weitz,eyalshim
322447822,318657012


1. ביישום שלנו כל רכיב ממלא תפקיד ברור ומחוברת זו לזו: מחלקת Image מטפלת בטעינת, שמירת וגישה לפיקסלים של תמונה; ImageProcessor מספקת פונקציות סטטיות ל-padding, פיצול לריבועים וחישוב בהירות ממוצעת שמשמשות את AsciiArtAlgorithm לפרוק את התמונה למקטעים; CharConverter ממירה תווים ל־BufferedImage ולמטריצת boolean לצורך מדידת בהירות; RoundingMode (enum) מגדיר את אופן העיגול של ערכי הבהירות ומוזן אל SubImgCharMatcher, שבונה מיפוי בין כל תו לערך הבהירות המחושב שלו (ונירמולו) ומחזיר את התו המתאים לכל רמת בהירות; האלגוריתם שב־AsciiArtAlgorithm לוקח את התמונות המפוצלות מ־ImageProcessor, מחשב את הבהירות, ומשתמש ב־SubImgCharMatcher כדי להרכיב מטריצת char[][] של ASCII art; וב־Shell מנהלים את פקודות המשתמש, בוחרים קבוצת תווים, רזולוציה ושיטת עיגול, בונים את ה-matcher וה-AsciiArtAlgorithm ואז מדפיסים או שומרים את התוצאה.
2.השתמשנו בכמה מבני נתונים של Java, כל אחד מהם נבחר לצורך הספציפי. במחלקה SubImgCharMatcher נעשה שימוש ב־ArrayList<Character> כדי לאחסן את רשימת התווים בסדר שמאפשר גישה ישירה לפי אינדקס. בחירה זו מתאימה למימוש פונקציית ההתאמה לפי בהירות, מאחר והבהירות מנורמלת למספר בין 0 לאורך הרשימה. השתמשנו ב־HashMap<Character, Double> כדי למפות כל תו לערך הבהירות המחושב שלו. מפה זה מבנה נתונים שמאפשר שליפה והסרה מהירה לפי תו, דבר שמייעל את פעולות העדכון כאשר מוסיפים או מסירים תווים. בהמשך, לאחר נירמול הערכים, המפה מומרת ל־TreeMap<Character, Double> כדי לשמר את סדר התווים על פי ASCII, מה שמקל על טיפול בתווים בטווחים. במחלקה Shell, נעשה שימוש ב־TreeSet<Character> כדי לאחסן את קבוצת התווים שהמשתמש בחר. מבנה זה מונע כפילויות ושומר את התווים ממויינים, כך שפלט הפקודה chars יוצא תמיד בסדר תקני. לבסוף, בקלאס AsciiArtAlgorithm מופיעה HashMap<Integer, Double> המשמשת כ־cache עבור ערכי הבהירות של תתי־התמונות, כדי להימנע מחישובים כפולים.
3.במערכת נעשה שימוש בחריגות  IOExceptionכדי לנהל קלט שגוי מהמשתמש ולמנוע קריסת התוכנית. לדוגמה, אם המשתמש מקליד פקודה לא תקינה כמו add ללא פרמטר מתאים, או מנסה לשנות רזולוציה לפורמט שאינו קביל, הפונקציה run במחלקה של shell תזהה ותטפל בשגיאה ע"י הדפסת הודעת שגיאה מתאימה. אנו מטפלים בזה ע"י  try-catch, כך שכל חריגה מטופלת על ידי הדפסת הודעה למשתמש — מבלי לעצור את פעולת התוכנית. גישה זו מבדילה בין לוגיקת עיבוד הקלט לבין מנגנון התגובה לשגיאות, ומביאה לכך שהמערכת יציבה וידידותית למשתמש גם כשהקלט אינו תקין.
4.במימוש שלנו הכנסנו שינויים ל־API של המחלקה SubImgCharMatcher, שנדרשו כדי להתאים את המחלקה לשימוש הדינמי שנעשה בה במסגרת מחלקת Shell. בין השינויים המרכזיים נוספה תמיכה בקביעת שיטת עיגול (באמצעות השדה roundingMode והמתודות setRoundingMode ו־getRoundingMode), כך שהמשתמש יכול לשלוט האם ההתאמה בין הבהירות לתו תיעשה כלפי מעלה, מטה או לנקודה הקרובה.
5. לא נעשה שינוי במחלקות